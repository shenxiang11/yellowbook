// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shenxiang11/go-sms-sdk/cloopen (interfaces: IClient,ISMS)

// Package cloopenmocks is a generated GoMock package.
package cloopenmocks

import (
	reflect "reflect"

	cloopen "github.com/shenxiang11/go-sms-sdk/cloopen"
	gomock "go.uber.org/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// SMS mocks base method.
func (m *MockIClient) SMS() cloopen.ISMS {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMS")
	ret0, _ := ret[0].(cloopen.ISMS)
	return ret0
}

// SMS indicates an expected call of SMS.
func (mr *MockIClientMockRecorder) SMS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMS", reflect.TypeOf((*MockIClient)(nil).SMS))
}

// MockISMS is a mock of ISMS interface.
type MockISMS struct {
	ctrl     *gomock.Controller
	recorder *MockISMSMockRecorder
}

// MockISMSMockRecorder is the mock recorder for MockISMS.
type MockISMSMockRecorder struct {
	mock *MockISMS
}

// NewMockISMS creates a new mock instance.
func NewMockISMS(ctrl *gomock.Controller) *MockISMS {
	mock := &MockISMS{ctrl: ctrl}
	mock.recorder = &MockISMSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISMS) EXPECT() *MockISMSMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockISMS) Send(arg0 *cloopen.SendRequest) (*cloopen.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(*cloopen.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockISMSMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockISMS)(nil).Send), arg0)
}
