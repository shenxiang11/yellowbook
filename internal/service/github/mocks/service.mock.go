// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/github/service.go

// Package githubmocks is a generated GoMock package.
package githubmocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AuthURL mocks base method.
func (m *MockIService) AuthURL(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthURL", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthURL indicates an expected call of AuthURL.
func (mr *MockIServiceMockRecorder) AuthURL(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthURL", reflect.TypeOf((*MockIService)(nil).AuthURL), ctx)
}

// VerifyCode mocks base method.
func (m *MockIService) VerifyCode(ctx context.Context, code string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCode", ctx, code)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCode indicates an expected call of VerifyCode.
func (mr *MockIServiceMockRecorder) VerifyCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCode", reflect.TypeOf((*MockIService)(nil).VerifyCode), ctx, code)
}
