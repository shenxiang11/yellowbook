// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/jwt_generator/jwt_generator.go

// Package jwtmocks is a generated GoMock package.
package jwtmocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIJWTGenerator is a mock of IJWTGenerator interface.
type MockIJWTGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIJWTGeneratorMockRecorder
}

// MockIJWTGeneratorMockRecorder is the mock recorder for MockIJWTGenerator.
type MockIJWTGeneratorMockRecorder struct {
	mock *MockIJWTGenerator
}

// NewMockIJWTGenerator creates a new mock instance.
func NewMockIJWTGenerator(ctrl *gomock.Controller) *MockIJWTGenerator {
	mock := &MockIJWTGenerator{ctrl: ctrl}
	mock.recorder = &MockIJWTGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJWTGenerator) EXPECT() *MockIJWTGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIJWTGenerator) Generate(id string, expire time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", id, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockIJWTGeneratorMockRecorder) Generate(id, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIJWTGenerator)(nil).Generate), id, expire)
}
